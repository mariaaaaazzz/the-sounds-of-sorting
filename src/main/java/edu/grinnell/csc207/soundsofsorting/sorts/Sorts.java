package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.ArrayList;
import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CopyEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SwapEvent;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> bubbleSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();

        if (arr == null || arr.length < 2) {
            return events;
        }

        for (int j = arr.length - 1; j > 0; j--) {
            for (int i = 0; i < j; i++) {
                events.add(new CompareEvent<>(i, i + 1));
                if (arr[i].compareTo(arr[i + 1]) > 0) {
                    swap(arr, i, i + 1);
                    events.add(new SwapEvent<>(i, i + 1));
                }
            }
        }
        return events;
    }


    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> selectionSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();

        if (arr == null || arr.length < 2) {
            return events;
        }
        for (int i = 0; i < arr.length - 1; i++) {
            int min = i;
            for (int j = i + 1; j < arr.length; j++) {
                events.add(new CompareEvent<>(j, min));
                if (arr[j].compareTo(arr[min]) < 0) {
                    min = j;
                }
            }
            if (min != i) {
                swap(arr, i, min);
                events.add(new SwapEvent<>(i, min));
            }
        }
        return events;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> insertionSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();

        if (arr == null || arr.length < 2) {
            return events;
        }
        for (int i = 1; i < arr.length; i++) {
            T cur = arr[i];
            int j = i - 1;

            while (j >= 0 && arr[j].compareTo(cur) > 0) {
                events.add(new CompareEvent<>(j, i));  

                arr[j + 1] = arr[j];
                events.add(new CopyEvent<>(j + 1, arr[j])); 
                j--;
            }
            if (j >= 0) {
                events.add(new CompareEvent<>(j, i)); 
            }
            
            arr[j + 1] = cur;
            events.add(new CopyEvent<>(j + 1, cur)); 
        }
        return events;
    }


    /**
     * Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> mergeSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();

        if (arr == null || arr.length < 2) {
            return events;
        }
        T[] tmp = (T[]) new Comparable[arr.length];

        mergeSort(arr, 0, arr.length - 1, tmp, events);
        return events;
    }

    /**
     * Recursively sorts a section of the array using the merge sort algorithm.
     *
     * @param <T> the type of elements in the array
     * @param a the array to sort
     * @param left the starting index of the section to sort
     * @param right the ending index of the section to sort
     * @param tmp a temporary array used to help with merging
     * @param events the list where all generated SortEvents are stored
     */
    private static <T extends Comparable<? super T>>
    void mergeSort(T[] a, int left, int right, T[] tmp, List<SortEvent<T>> events) {
        if (left >= right) {
            return;
        }
        int mid = left + (right - left) / 2;
        mergeSort(a, left, mid, tmp, events);
        mergeSort(a, mid + 1, right, tmp, events);
        merge(a, left, mid, right, tmp, events);
    }

    
    /**
     * Merges two sorted parts of an array into one sorted section. 
     *
     * @param <T> the type of elements in the array
     * @param a the array that contains the two halves to merge
     * @param left the first index of the left half
     * @param mid the last index of the left half
     * @param right the last index of the right half
     * @param tmp a temporary array used during merging
     * @param events the list where all generated SortEvents are added
     */
    private static <T extends Comparable<? super T>>
    void merge(T[] a, int left, int mid, int right, T[] tmp, List<SortEvent<T>> events) {
        int i = left;      
        int j = mid + 1;   
        int k = left;      


        while (i <= mid && j <= right) {
            events.add(new CompareEvent<>(i, j)); 

            if (a[i].compareTo(a[j]) <= 0) {
                tmp[k] = a[i];
                events.add(new CopyEvent<>(k, a[i])); 
                i++;
            } else {
                tmp[k] = a[j];
                events.add(new CopyEvent<>(k, a[j])); 
                j++;
            }
            k++;
        }

       
        while (i <= mid) {
            tmp[k] = a[i];
            events.add(new CopyEvent<>(k, a[i]));
            i++;
            k++;
        }


        while (j <= right) {
            tmp[k] = a[j];
            events.add(new CopyEvent<>(k, a[j]));
            j++;
            k++;
        }


        for (int p = left; p <= right; p++) {
            a[p] = tmp[p];
            events.add(new CopyEvent<>(p, tmp[p])); 
        }
    }










    /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> quickSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();
        if (arr == null || arr.length < 2) {
            return events;
        }
        quickSort(arr, 0, arr.length - 1, events);
        return events;
    }

/**
     * Recursively applies the Quick Sort algorithm to sort
     * the part of the array between lo and hi
   
     * @param <T> the type of elements in the array
     * @param arr the array being sorted
     * @param lo the starting index of the section to sort
     * @param hi the ending index of the section to sort
     * @param events the list where SortEvents are stored
     */
    private static <T extends Comparable<? super T>>
    void quickSort(T[] arr, int lo, int hi, List<SortEvent<T>> events) {
        if (lo >= hi) return;
        int p = partition(arr, lo, hi, events);
        quickSort(arr, lo, p - 1, events);
        quickSort(arr, p + 1, hi, events);
    }

    /**
     * Splits the array section into two parts based on a pivot value.
     * @param <T> the type of elements in the array
     * @param arr the array being sorted
     * @param lo the first index of the section to partition
     * @param hi the last index of the section to partition
     * @param events the list that stores SortEvents
     * @return the final pivot position after partitioning
     */
    private static <T extends Comparable<? super T>>
    int partition(T[] arr, int lo, int hi, List<SortEvent<T>> events) {
        T pivot = arr[hi];
        int i = lo - 1;
        for (int j = lo; j < hi; j++) {
            events.add(new CompareEvent<>(j, hi)); 
            if (arr[j].compareTo(pivot) <= 0) {
                i++;
                if (i != j) {
                    swap(arr, i, j);
                    events.add(new SwapEvent<>(i, j));
                }
            }
        }
        if (i + 1 != hi) {
            swap(arr, i + 1, hi);
            events.add(new SwapEvent<>(i + 1, hi));
        }
        return i + 1;
    }

    /**
     * Replays the given list of SortEvents on the array in order.
     * @param <T> the type of elements in the array
     * @param arr the array to modify
     * @param events the list of SortEvents to apply in sequence
     */
    public static <T> void eventSort(T[] arr, List<SortEvent<T>> events) {
        if (arr == null || events == null) {
            return;
        }
        for (int i = 0; i < events.size(); i++) {
            SortEvent<T> event = events.get(i);
            event.apply(arr);
        }
    }
}